
PROJECTSETUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800043c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800043c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000075c  00000000  00000000  00010465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000349  00000000  00000000  00010bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00010f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00010fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001016e  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015a0  00000000  00000000  000211d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000544c4  00000000  00000000  00022776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00076c3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000194  00000000  00000000  00076c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	0800041c 	.word	0x0800041c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	0800041c 	.word	0x0800041c

0800014c <main>:
#include "main.h"
#include "rcc.h"
#include "gpio.h"

int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    // ConfigHSE at 72Mhz
	rcc_HSE_config();
 8000150:	f000 f84a 	bl	80001e8 <rcc_HSE_config>
	//systick-at 72Mhz
	systick_init();
 8000154:	f000 f8d6 	bl	8000304 <systick_init>
    gpio_Config();
 8000158:	f000 f810 	bl	800017c <gpio_Config>

	while (1) {
	DelayMs(100);
 800015c:	2064      	movs	r0, #100	; 0x64
 800015e:	f000 f901 	bl	8000364 <DelayMs>
	gpio_On_Off();
 8000162:	f000 f833 	bl	80001cc <gpio_On_Off>
	DelayMs(100);
 8000166:	2064      	movs	r0, #100	; 0x64
 8000168:	f000 f8fc 	bl	8000364 <DelayMs>
	DelayMs(100);
 800016c:	e7f6      	b.n	800015c <main+0x10>

0800016e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800016e:	b480      	push	{r7}
 8000170:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000172:	bf00      	nop
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
	...

0800017c <gpio_Config>:
 */

#include "gpio.h"

// gpioConfig
void gpio_Config() {
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0

	RCC->APB2ENR &= ~(RCC_APB2ENR_IOPCEN);
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <gpio_Config+0x48>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a0f      	ldr	r2, [pc, #60]	; (80001c4 <gpio_Config+0x48>)
 8000186:	f023 0310 	bic.w	r3, r3, #16
 800018a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800018c:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <gpio_Config+0x48>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a0c      	ldr	r2, [pc, #48]	; (80001c4 <gpio_Config+0x48>)
 8000192:	f043 0310 	orr.w	r3, r3, #16
 8000196:	6193      	str	r3, [r2, #24]
	GPIOC->CRH &= ~(GPIO_CRH_MODE13);
 8000198:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <gpio_Config+0x4c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <gpio_Config+0x4c>)
 800019e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001a2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE13_1;
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <gpio_Config+0x4c>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <gpio_Config+0x4c>)
 80001aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001ae:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(GPIO_CRH_CNF13);
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <gpio_Config+0x4c>)
 80001b2:	685b      	ldr	r3, [r3, #4]
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <gpio_Config+0x4c>)
 80001b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001ba:	6053      	str	r3, [r2, #4]

}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40011000 	.word	0x40011000

080001cc <gpio_On_Off>:

void gpio_On_Off(){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0

	  GPIOC->ODR ^= (1UL << 13);
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <gpio_On_Off+0x18>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <gpio_On_Off+0x18>)
 80001d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001da:	60d3      	str	r3, [r2, #12]
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	40011000 	.word	0x40011000

080001e8 <rcc_HSE_config>:

/**
 * HSE Configuration Setup
 */

void rcc_HSE_config(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	 *  APB1Prescalar  = 2 -->  36,72Mhz
	 *  APB2Prescalar  = 1 -->  72MHz Both
	 *  ADC_Prescalar  = 6 -->  12Mhz
	 */
	//PLL CONFIGUTRTION
	RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
 80001ec:	4b43      	ldr	r3, [pc, #268]	; (80002fc <rcc_HSE_config+0x114>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4a42      	ldr	r2, [pc, #264]	; (80002fc <rcc_HSE_config+0x114>)
 80001f2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80001f6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);
 80001f8:	4b40      	ldr	r3, [pc, #256]	; (80002fc <rcc_HSE_config+0x114>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a3f      	ldr	r2, [pc, #252]	; (80002fc <rcc_HSE_config+0x114>)
 80001fe:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000202:	6053      	str	r3, [r2, #4]
	//USB DIVIDER
	RCC->CFGR &= ~(RCC_CFGR_USBPRE);
 8000204:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <rcc_HSE_config+0x114>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a3c      	ldr	r2, [pc, #240]	; (80002fc <rcc_HSE_config+0x114>)
 800020a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800020e:	6053      	str	r3, [r2, #4]
	//HSEOsilator
	RCC->CR &= ~(RCC_CR_HSEON);
 8000210:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <rcc_HSE_config+0x114>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a39      	ldr	r2, [pc, #228]	; (80002fc <rcc_HSE_config+0x114>)
 8000216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021a:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_CR_HSEON);
 800021c:	4b37      	ldr	r3, [pc, #220]	; (80002fc <rcc_HSE_config+0x114>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a36      	ldr	r2, [pc, #216]	; (80002fc <rcc_HSE_config+0x114>)
 8000222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000226:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000228:	bf00      	nop
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <rcc_HSE_config+0x114>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <rcc_HSE_config+0x42>
		;
	//HSE as PLL source
	RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8000236:	4b31      	ldr	r3, [pc, #196]	; (80002fc <rcc_HSE_config+0x114>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a30      	ldr	r2, [pc, #192]	; (80002fc <rcc_HSE_config+0x114>)
 800023c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000240:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PLLSRC);
 8000242:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <rcc_HSE_config+0x114>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a2d      	ldr	r2, [pc, #180]	; (80002fc <rcc_HSE_config+0x114>)
 8000248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024c:	6053      	str	r3, [r2, #4]
	RCC->CR &= ~(RCC_CR_PLLON);
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <rcc_HSE_config+0x114>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a2a      	ldr	r2, [pc, #168]	; (80002fc <rcc_HSE_config+0x114>)
 8000254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000258:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_CR_PLLON);
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <rcc_HSE_config+0x114>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a27      	ldr	r2, [pc, #156]	; (80002fc <rcc_HSE_config+0x114>)
 8000260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000264:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000266:	bf00      	nop
 8000268:	4b24      	ldr	r3, [pc, #144]	; (80002fc <rcc_HSE_config+0x114>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000270:	2b00      	cmp	r3, #0
 8000272:	d0f9      	beq.n	8000268 <rcc_HSE_config+0x80>
		;
	//Flash pre-fetch enable and wait-state=2
	//0WS: 0-24MHz
	//1WS: 24-48MHz
	//2WS: 48-72MHz
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000274:	4b22      	ldr	r3, [pc, #136]	; (8000300 <rcc_HSE_config+0x118>)
 8000276:	2212      	movs	r2, #18
 8000278:	601a      	str	r2, [r3, #0]
	//Select PLL as main System Clock source
	RCC->CFGR &= ~(RCC_CFGR_SW);
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <rcc_HSE_config+0x114>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	4a1f      	ldr	r2, [pc, #124]	; (80002fc <rcc_HSE_config+0x114>)
 8000280:	f023 0303 	bic.w	r3, r3, #3
 8000284:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_SW_1);
 8000286:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <rcc_HSE_config+0x114>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4a1c      	ldr	r2, [pc, #112]	; (80002fc <rcc_HSE_config+0x114>)
 800028c:	f043 0302 	orr.w	r3, r3, #2
 8000290:	6053      	str	r3, [r2, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS_1) == 0)
 8000292:	bf00      	nop
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <rcc_HSE_config+0x114>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	f003 0308 	and.w	r3, r3, #8
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f9      	beq.n	8000294 <rcc_HSE_config+0xac>
		;
	//Peripherals Clock Setup
	//AHB PreScalar Setup
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <rcc_HSE_config+0x114>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	4a15      	ldr	r2, [pc, #84]	; (80002fc <rcc_HSE_config+0x114>)
 80002a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002aa:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_HPRE_0);
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <rcc_HSE_config+0x114>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a12      	ldr	r2, [pc, #72]	; (80002fc <rcc_HSE_config+0x114>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6053      	str	r3, [r2, #4]
	//Peripherals Clock Setup
	//APB PreScalar Setup
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <rcc_HSE_config+0x114>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <rcc_HSE_config+0x114>)
 80002be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002c2:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <rcc_HSE_config+0x114>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <rcc_HSE_config+0x114>)
 80002ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ce:	6053      	str	r3, [r2, #4]
	//Peripherals Clock Setup
	//APB2 PreScalar Setup
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <rcc_HSE_config+0x114>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a09      	ldr	r2, [pc, #36]	; (80002fc <rcc_HSE_config+0x114>)
 80002d6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80002da:	6053      	str	r3, [r2, #4]
	//Peripherals Clock Setup
	//ADC PreScalar Setup
	RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <rcc_HSE_config+0x114>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a06      	ldr	r2, [pc, #24]	; (80002fc <rcc_HSE_config+0x114>)
 80002e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002e6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_ADCPRE_1);
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <rcc_HSE_config+0x114>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <rcc_HSE_config+0x114>)
 80002ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002f2:	6053      	str	r3, [r2, #4]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000
 8000300:	40022000 	.word	0x40022000

08000304 <systick_init>:
/**
 * SystrickConfiguration Setup
 */

void systick_init(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <systick_init+0x2c>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <systick_init+0x2c>)
 8000310:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000314:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <systick_init+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 5;
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <systick_init+0x2c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a03      	ldr	r2, [pc, #12]	; (8000330 <systick_init+0x2c>)
 8000322:	f043 0305 	orr.w	r3, r3, #5
 8000326:	6013      	str	r3, [r2, #0]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	e000e010 	.word	0xe000e010

08000334 <DelayMillis>:

void DelayMillis(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	SysTick->LOAD = 72000-1;
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <DelayMillis+0x28>)
 800033a:	4a09      	ldr	r2, [pc, #36]	; (8000360 <DelayMillis+0x2c>)
 800033c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <DelayMillis+0x28>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000344:	bf00      	nop
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <DelayMillis+0x28>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <DelayMillis+0x12>
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	e000e010 	.word	0xe000e010
 8000360:	0001193f 	.word	0x0001193f

08000364 <DelayMs>:

void DelayMs(unsigned long t)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	for(;t>0;t--)
 800036c:	e004      	b.n	8000378 <DelayMs+0x14>
		{
			DelayMillis();
 800036e:	f7ff ffe1 	bl	8000334 <DelayMillis>
	for(;t>0;t--)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3b01      	subs	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f7      	bne.n	800036e <DelayMs+0xa>
		}
}
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ae:	f7ff fede 	bl	800016e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b2:	f000 f80f 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff fec9 	bl	800014c <main>
  bx lr
 80003ba:	4770      	bx	lr
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c4:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC1_2_IRQHandler>
	...

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	2600      	movs	r6, #0
 80003d8:	4d0c      	ldr	r5, [pc, #48]	; (800040c <__libc_init_array+0x38>)
 80003da:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	f000 f81a 	bl	800041c <_init>
 80003e8:	2600      	movs	r6, #0
 80003ea:	4d0a      	ldr	r5, [pc, #40]	; (8000414 <__libc_init_array+0x40>)
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <__libc_init_array+0x44>)
 80003ee:	1b64      	subs	r4, r4, r5
 80003f0:	10a4      	asrs	r4, r4, #2
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
